// standart font of m129 engine data
const stdfont
const stdfont

// This is the main methods of the m129 engine
var gametitle = "game"
var gameauthor = "author"
var ver = "INDEV"

var isNW = false
if (typeof nw !== 'undefined') {
	isNW=true
}

var luaconf
var lua
var lauxlib
var lualib
var L 

if(typeof fengari !== 'undefined'){
	luaconf  = fengari.luaconf;
	lua      = fengari.lua;
	lauxlib  = fengari.lauxlib;
	lualib   = fengari.lualib;

	L = lauxlib.luaL_newstate();

	lualib.luaL_openlibs(L);

	L.execute=function(){}
}

var mwidth = 256;
var mheight = 192;
var scale = 2;

var canvas = document.getElementById('m129canvas');
var ctx = canvas.getContext('2d');
ctx.imageSmoothingEnabled = false;
//document.getElementById('m129canvas').style.cursor = "none"

var sprLayer = document.createElement('canvas');
var sprCtx = sprLayer.getContext('2d');
sprLayer.width = mwidth;
sprLayer.height = mheight;
sprCtx.imageSmoothingEnabled = false;

var tileLayer = document.createElement('canvas');
var tileCtx = tileLayer.getContext('2d');
tileLayer.width = 2048;
tileLayer.height = 2048;

tileCtx.imageSmoothingEnabled = false;

document.onkeydown = function (e) {
    e = e || window.event;
	if(e.keyCode==9){e.preventDefault();e.stopPropagation();}

    if (!e.ctrlKey) return;

    var code = e.key;

     switch (code) {
        case "s":
        case "w":
		case "o":
            e.preventDefault();
            e.stopPropagation();
            break;
    }
};

let audioContext = new (window.AudioContext ||
    window.webkitAudioContext ||
    function () {
        throw "Your browser does not support Web Audio API";
    })();

const squareCurve = new Float32Array(256);
squareCurve.fill(-1, 0, 128);
squareCurve.fill(1, 128, 256);

const constantCurve = new Float32Array(2);
constantCurve[0] = 1;
constantCurve[1] = 1;

audioContext.createPulseOscillator = () => {
    const oscillator = new OscillatorNode(audioContext, { type: "sawtooth" });
    const squareShaper = new WaveShaperNode(audioContext, { curve: squareCurve });
    const constantShaper = new WaveShaperNode(audioContext, { curve: constantCurve });
    const widthParameter = new GainNode(audioContext, { gain: 0 });

    oscillator.width = widthParameter.gain;

    oscillator.connect(constantShaper);
    constantShaper.connect(widthParameter);
    widthParameter.connect(squareShaper);

    oscillator.connect = () => {
        squareShaper.connect.apply(squareShaper, arguments);
    };
    oscillator.disconnect = () => {
        squareShaper.disconnect.apply(squareShaper, arguments);
    };

    return oscillator;
};



// Vector2 function constructor by Dalimi (https://github.com/Dalimil)
// all credits and thanks goes to him 

function Vector2(x, y) {
	this.x = (x === undefined) ? 0 : x;
	this.y = (y === undefined) ? 0 : y;
}

Vector2.prototype = {
	set: function(x, y) {
		this.x = x || 0;
		this.y = y || 0;
	},
	clone: function() {
		return new Vector2(this.x, this.y)
	},
	add: function(vector) {
		return new Vector2(this.x + vector.x, this.y + vector.y);
	},
	subtract: function(vector) {
		return new Vector2(this.x - vector.x, this.y - vector.y);
	},
	scale: function(scalar) {
		return new Vector2(this.x * scalar, this.y * scalar);
	},
	dot: function(vector) {
		return (this.x * vector.x + this.y * vector.y);
	},
	moveTowards: function(vector, t) {
		// Linearly interpolates between vectors A and B by t.
		// t = 0 returns A, t = 1 returns B
		t = Math.min(t, 1); // still allow negative t
		var diff = vector.subtract(this);
		return this.add(diff.scale(t));
	},
	magnitude: function() {
		return Math.sqrt(this.magnitudeSqr());
	},
	magnitudeSqr: function() {
		return (this.x * this.x + this.y * this.y);
	},
	distance: function (vector) {
		return Math.sqrt(this.distanceSqr(vector));
	},
	distanceSqr: function (vector) {
		var deltaX = this.x - vector.x;
		var deltaY = this.y - vector.y;
		return (deltaX * deltaX + deltaY * deltaY);
	},
	normalize: function() {
		var mag = this.magnitude();
		var vector = this.clone();
		if(Math.abs(mag) < 1e-9) {
			vector.x = 0;
			vector.y = 0;
		} else {
			vector.x /= mag;
			vector.y /= mag;
		}
		return vector;
	},
	angle: function() {
		return Math.atan2(this.y, this.x);
	},
	rotate: function(alpha) {
		var cos = Math.cos(alpha);
		var sin = Math.sin(alpha);
		var vector = new Vector2();
		vector.x = this.x * cos - this.y * sin;
		vector.y = this.x * sin + this.y * cos;
		return vector;
	},
	toPrecision: function(precision) {
		var vector = this.clone();
		vector.x = vector.x.toFixed(precision);
		vector.y = vector.y.toFixed(precision);
		return vector;
	},
	toString: function () {
		var vector = this.toPrecision(1);
		return ("[" + vector.x + "; " + vector.y + "]");
	}
};

//Tile Data constructor

function TileData(w,h,d=0) {
	this.width = w;
	this.height = h;
	this.data = new Uint8Array(w*h);
	this.data.fill(d);
}
TileData.prototype={
	set: function(td,dx,dy){
		if (td.data!=undefined){
			let index=0
			for(y=dy;y<Math.min(dy+td.height,this.height);y++){
				for(x=dx;x<Math.min(dx+td.width,this.width);x++){
					this.data[x+y*this.width]=td.data[index]
					index+=1
				}
			}
		}else{
			this.data[dx+dy*this.width]=td
		}
	},
	get: function(dx,dy,w,h){
		if(w!=undefined && h!=undefined){
			let index=0
			let o = new TileData(w,h)
			for(y=dy;y<Math.min(dy+h,this.height);y++){
				for(x=dx;x<Math.min(dx+w,this.width);x++){
					o.data[index]=this.data[x+y*this.width]
					index+=1
				}
			}
			return o
		}else{
			return this.data[dx+dy*this.width]||0
		}
	},
	toString: function(){
		let str=""
		for (i=0;i<this.data.length;i++){
			if ((i%this.w)==0){str+="\n"}
			str+=String("000").substring(0,this.data[i].toString().length+1)+this.data[i]+" "
		}
		return str
	},
}

var palette = [
	[0, 0, 0],
	[128, 0, 0],
	[0, 128, 0],
	[128, 128, 0],
	[0, 0,128],
	[128, 0, 128],
	[0, 128, 128],
	[40, 40, 40],
	[140, 140, 140],
	[255, 0, 0],
	[0, 255, 0],
	[255, 255, 0],
	[0, 0, 255],
	[255, 0, 255],
	[0, 255, 255],
	[255, 255, 255]
];

var graph
var font
var chrW = 8
var chrH = 8

var mapTiles = new TileData(256,256)
var mapColors = new TileData(256,256)

function rgbToHex(r, g, b) {
	return "#" + (1 << 24 | r << 16 | g << 8 | b).toString(16).slice(1);
}

function Uint8ToString(u8a){
	var CHUNK_SZ = 0x8000;
	var c = [];
	for (var i=0; i < u8a.length; i+=CHUNK_SZ) {
		c.push(String.fromCharCode.apply(null, u8a.subarray(i, i+CHUNK_SZ)));
	}
	return c.join("");
}

function Base64ToUint8(a){
	return new Uint8Array(atob(a).split("").map(function(c) {return c.charCodeAt(0); }));
}

function color(c){
	if (c>=0&&c<16){
		return "rgb(" + palette[c][0]+","+palette[c][1]+","+palette[c][2]+")";
	}else{
		return "rgb(0,0,0,0)";
	}
	// !isNaN(palette[c+1][0])} else if (palette[c][0]=="#"){return palette[c];
}

function imgdataToImage(imagedata) {
    var canvas = document.createElement('canvas');
    var ctx = canvas.getContext('2d');
    canvas.width = imagedata.width;
    canvas.height = imagedata.height;
    ctx.putImageData(imagedata, 0, 0);

    var image = new Image();
    image.src = canvas.toDataURL();
    return image;
}
function emptyGraphData(){
	let a = "";
	for(i=0;i<16384;i++){
		a = a + "0";
	}
	return a;
}

function loadGraph(g){
	var t = ctx.createImageData(128,2048);
	var cnt = 0;
	index = 0;
	for(y=0; y<2048; y++){
		for(x=0; x<8; x++){
			p = parseInt(g[cnt]);
			for (c=0; c<palette.length; c++){
				index = (x+c*8+y*128)*4
				t.data[index+0] = p*palette[c][0];
				t.data[index+1] = p*palette[c][1];
				t.data[index+2] = p*palette[c][2];
				t.data[index+3] = p*255;
			}
			cnt+=1;
		}
	}
	return t;
}

function mode(m){
	switch (m){
		case 1:
			font = imgdataToImage(loadGraph(stdfont));
			chrW = 8
			chrH = 8
			mwidth = 256
			mheight = 192
			break;
		case 2:
			font = imgdataToImage(loadGraph(stdfontS));
			chrW = 4
			chrH = 6
			mwidth = 128
			mheight = 96
			break;
		case 3:
			font = imgdataToImage(loadGraph(stdfontS));
			chrW = 4
			chrH = 6
			mwidth = 64
			mheight = 48
			break;
	}	
}

function cls(c=0){
	sprCtx.fillStyle = color(c);
	sprCtx.fillRect(0, 0, sprLayer.width, sprLayer.height);
}

function clt(c){
	tileCtx.fillStyle = color(c);
	tileCtx.fillRect(0, 0, tileLayer.width, tileLayer.height);
}

function sprite(spr,x,y,c=15,w=1,h=1,fh=false,fv=false){
	let oh = (1-fh*2)
	let ov = (1-fv*2)
	
	if(fh||fv){sprCtx.scale(oh,ov)}
	
	if(w==1&h==1){ 
		sprCtx.drawImage(graph,c*8,spr*8,8,8,
		Math.floor(x)*oh-w*8*fh,
		Math.floor(y)*ov-h*8*fv,
		8,8)
	}else{
		for(oy=0;oy<h;oy++){
			for(ox=0;ox<w;ox++){
				sprCtx.drawImage(
				graph,c*8,(spr+ox+oy*32)*8,8,8,
				Math.floor(x+(ox*oh)*8)*oh-w*8*fh,
				Math.floor(y+(oy*ov)*8)*ov-h*8*fv,
				8,8)
			}
		}
	}
	sprCtx.setTransform(1,0,0,1,0,0);
}
function ssprite(spr,x,y,c=15,w=8,h=8,fh=false,fv=false){
	sprCtx.scale(1-fh*2,1-fv*2)
	sprCtx.drawImage(graph,c*8,spr*8,8,8,Math.floor(x)*(1-fh*2)-w*fh,Math.floor(y)*(1-fv*2)-h*fv,w,h)
	sprCtx.setTransform(1,0,0,1,0,0);
}


function chr(spr,x,y,c = 15){
	sprCtx.drawImage(font,c*8,spr*8,8,8,Math.floor(x),Math.floor(y),8,8);
}

function tile(spr,x,y,c = 15,b = 0){
	x=Math.floor(x)
	y=Math.floor(y)
	if(spr!=0){
		mapTiles.set(spr,x,y)
		mapColors.set(c*16+b,x,y)
		tileCtx.fillStyle = color(b);
		tileCtx.fillRect(x*8,y*8, 8, 8);
		tileCtx.drawImage(graph,c*8,spr*8,8,8,x*8,y*8,8,8);
	}else{
		mapTiles.set(0,x,y)
		mapColors.set(0,x,y)
		tileCtx.clearRect(x*8,y*8, 8, 8);
	}
}

function text(txt,x,y,l=32-Math.floor(x/8),c = 15,b){
	let txts = txt.toString()
	let txtspl = txts.split(" ");
	let xo = 0;
	let yo = 0;
	let s = false
	for (i = 0; i<txtspl.length;i++){
		if (txtspl[i][0] == "#"){
			if (txtspl[i][1] == "n"){
				i += 1;
				yo += 1; 
				xo = 0;
			}
			else if (txtspl[i].substring(1,txtspl[i].lenght)>=0){
				c = parseInt(txtspl[i].substring(1,txtspl[i].lenght));
				i += 1;
			}
		}
		let tp = txtspl[i] 
		if (i!=txtspl.length-1){tp+=" "}
		
		if (xo + tp.length > l){
			yo += 1; 
			xo = 0;
		}
		
		for (j = 0; j<tp.length;j++){
			let spr = tp[j].charCodeAt() - 1
			if (b!=undefined){
				sprCtx.fillStyle = color(b);
				sprCtx.fillRect(Math.floor(x)+xo*chrW,Math.floor(y)+yo*chrH,chrW,chrH);
			}
			sprCtx.drawImage(font,c*8,spr*8,8,8,Math.floor(x)+xo*chrW,Math.floor(y)+yo*chrH,8,8)
			xo += 1;
		}
	}
}

function map(x,y,sx,sy,w,h){
	sx=Math.floor(sx)
	sy=Math.floor(sy)
	sprCtx.drawImage(tileLayer,sx*8,sy*8,w*8,h*8,Math.floor(x),Math.floor(y),w*8,h*8)
}

function mapRedraw(){
	tileCtx.clearRect(0,0,2048,2048);
	for(i=0;i<256*256;i++){
		let x=i%256
		let y=i/256|0
		let spr=mapTiles.get(x,y)
		let c=mapColors.get(x,y)/16|0
		let b=mapColors.get(x,y)%16
		if (spr!=0){
			tileCtx.fillStyle = color(b);
			tileCtx.fillRect(Math.floor(x)*8,Math.floor(y)*8, 8, 8);
			tileCtx.drawImage(graph,c*8,spr*8,8,8,Math.floor(x)*8,Math.floor(y)*8,8,8);
		}
	}
}

function recta(x,y,w,h,c1,c2 = c1){
	sprCtx.lineWidth = 2;
	sprCtx.fillStyle = color(c1);
	sprCtx.fillRect(Math.floor(x),Math.floor(y), Math.floor(w), Math.floor(h));
	if (c2!=c1){
	sprCtx.fillStyle = color(c2);
	sprCtx.fillRect(Math.floor(x),Math.floor(y), Math.floor(w), 1);
	sprCtx.fillRect(Math.floor(x),Math.floor(y+h-1), Math.floor(w), 1);
	sprCtx.fillRect(Math.floor(x),Math.floor(y), 1, Math.floor(h));
	sprCtx.fillRect(Math.floor(x+w-1),Math.floor(y), 1, Math.floor(h));
	//sprCtx.strokeRect(Math.floor(x),Math.floor(y), Math.floor(w), Math.floor(h));
	}
}

function drawLine(canvas,startX,startY,endX,endY,c,w=1) {
	const ctx = canvas.getContext('2d');
  
	const dx = endX - startX;
	const dy = endY - startY;
	const length = Math.sqrt(dx * dx + dy * dy);
	const angle = Math.atan2(dy, dx);
  
	ctx.fillStyle = color(c);

	for (let i = 0; i < length; i++) {
		const x = startX + Math.cos(angle) * i;
		const y = startY + Math.sin(angle) * i;
		ctx.fillRect(Math.floor(x), Math.floor(y), w, w);
	}
}

function sound(snd,p,vol){
	audioContext.resume()
	var posc=audioContext.createPulseOscillator()
	posc.frequency.value=p
	posc.width.value=0.2; //The initial pulse-width.
	posc.gain=vol;
	posc.start(audioContext.currentTime);
	posc.stop(audioContext.currentTime+2);
}


function randint(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}


let secondsPassed;
let oldTimeStamp;
let fps;
window.onload = mInit;


// export functions to lua
exportFunctions = `
m=math
t=table
s=string

keysp={}
mapTiles={}
mapColors={}

function col(ax,ay,aw,ah,bx,by,bw,bh)
	if 
	ax+aw >= bx and
	ax <= bx+bw and
	ay+ah >= by and
	ay <= by+bh then
		return true
	else 
		return false
	end
end

function chkcol(x,y,w,h,p)

	local tx=m.floor((x-4)/8+0.5)
	local ty=m.floor((y-4)/8+0.5)
	
	local r=false
		
	for i=0,w*h do
		local cx=(tx+i%w)
		local cy=(ty+m.floor(i/w))
		if gtile(cx,cy)~=0 then
			if col(
			x,y,8,8,
			cx*8,cy*8,8,8
			) then 
				r=true
			end
		end
	end
  return r
end

function mode(m)
	js.global:mode(m)
end

function cls(c)
	js.global:cls(c)
end

function clt(c)
	js.global:clt(c)
end

function setp(x,y,c)
	js.global:recta(x,y,1,1,c)
end

function rect(x,y,w,h,c1,c2)
	c2 = c2 or c1
	js.global:recta(x,y,w,h,c1,c2)
end

function line(x1,y1,x2,y2,c,w)
	w = w or 1
	js.global:drawLine(sprCtx,x1,y1,x2,y2,c,w)
end

function spr(spr,x,y,c,w,h,fh,fv)
	c = c or 15
	w = w or 1
	h = h or 1
	fh = fh or false
	fv = fv or false
	js.global:sprite(spr,x,y,c,w,h,fh,fv)
end

function sspr(spr,x,y,c,w,h,fh,fv)
	c = c or 15
	w = w or 8
	h = h or 8
	fh = fh or false
	fv = fv or false
	js.global:ssprite(spr,x,y,c,w,h,fh,fv)
end

function chr(spr,x,y,c)
	c = c or 15
	js.global:chr(spr,x,y,c)
end

function tile(spr,x,y,c,b)
	c = c or 15
	b = b or 0
	js.global:tile(spr,x,y,c,b)
	mapTiles[x+y*256]=spr
	mapColors[x+y*256]=c*16+b
end

function text(txt,x,y,c,b,l)
	c = c or 15
	b = b or 0
	l = l or 32-math.floor(x/8)
	js.global:text(txt,x,y,l,c,b)
end

function map(x,y,sx,sy,w,h)
	js.global:map(x,y,sx,sy,w,h)
end

function gtile(x,y)
	x=math.floor(x)
	y=math.floor(y)
	x=math.max(math.min(x,256),0)
	y=math.max(math.min(y,256),0)
	return mapTiles[x+y*256]
end

function gcolor(x,y)
	x=math.floor(x)
	y=math.floor(y)
	return mapColors[x+y*256]
end

function key(k)
	if keysp[k]~= nil then
		return keysp[k][1] 
	else 
		return false 
	end
end

function keyd(k)
	if keysp[k]~= nil then
		if keysp[k][2]==0 then
			return true 
		else 
			return false 
		end
	end
end


-- the loop functions

function init()
end

function update()
end

function draw()
end

--classes

vec2={}
function vec2:new(X,Y)
  local v={}
  
  v.x  =X or 0
  v.y  =Y or 0
  
  function v:len() 
    return m.sqrt(self.x^2+self.y^2) 
  end
  function v:ang() 
    return m.atan2(self.y,self.x) 
  end
  
  setmetatable(v,self)
  self._index_=self
  return v
end

vecmove={}
function vecmove:new(X,Y,W,H)
	local obj={}
	obj.x   =X
	obj.y   =Y
	obj.dx  =0
	obj.dy  =0
	obj.v   =vec2:new(0,0)
	obj.spd =0
	
	function obj:onmove() end
	function obj:onmovex() end
	function obj:onmovey() end
	
	function obj:move()
	
		self.dx=m.cos(self.v:ang())*self.spd
		self.dy=m.sin(self.v:ang())*self.spd*-1
		
		local ddx=0
		if self.dx~=0 then
			ddx=math.abs(self.dx)/self.dx
		end
		local ddy=0
		if self.dy~=0 then
			ddy=math.abs(self.dy)/self.dy
		end
		
		local function s(n)
			local r=0
			if n~=0 then
				r=m.abs(n)/m.ceil(m.abs(n))
			else
				r=m.abs(m.ceil(n))
			end
			return r
		end
		
		for i=1,m.ceil(m.abs(self.dx)) do
			self:onmove()
			self:onmovex()
			self.x=self.x+ddx*s(self.dx)
		end
		for i=1,m.ceil(m.abs(self.dy)) do
			self:onmove()
			self:onmovey()
			self.y=self.y+ddy*s(self.dy)
		end
	end
	
	function obj:handle()
		obj:move()
	end
	
	
	setmetatable(obj,self)
	self._index_=self
	return obj
end

ball={}
function ball:new(X,Y,W,H,spd,angl)
	local obj={}
	obj.x   =X
	obj.y   =Y
	obj.w   =W
	obj.h   =H
	obj.dx  =0
	obj.dy  =0
	obj.spd =spd
	obj.angl=angl
	obj.dec =0
	obj.cf=0
	
	function obj:onmove() end
	function obj:onmovex() end
	function obj:onmovey() end
	
	function obj:oncol() end
	function obj:oncolx() end
	function obj:oncoly() end
	
	function obj:move()
		self.dx=m.cos(m.rad(self.angl))*self.spd
		self.dy=m.sin(m.rad(self.angl))*self.spd
		
		self.spd=m.max(self.spd-self.dec*0.1,0)
		
		local ddx=0
		if self.dx~=0 then
			ddx=math.abs(self.dx)/self.dx
		end
		local ddy=0
		if self.dy~=0 then
			ddy=math.abs(self.dy)/self.dy
		end
		
		local function s(n)
			local r=0
			if n~=0 then
				r=m.abs(n)/m.ceil(m.abs(n))
			else
				r=m.abs(m.ceil(n))
			end
			return r
		end
		
		for i=1,m.ceil(m.abs(self.dx)) do
			self:onmove()
			self:onmovex()
			self.x=self.x+ddx*s(self.dx)
			--if chkcol(self.x,self.y,self.w,self.h,self.cf) then 
			--	self:oncol() 
			--	self:oncolx() 
			--end
		end
		for i=1,m.ceil(m.abs(self.dy)) do
			self:onmove()
			self:onmovey()
			self.y=self.y-ddy*s(self.dy)
			--if chkcol(self.x,self.y,self.w,self.h,self.cf) then 
			--	self:oncol() 
			--	self:oncoly() 
			--end
		end
	end
	
	function obj:handle()
		obj:move()
	end
	
	
	setmetatable(obj,self)
	self._index_=self
	return obj
end



`

const lUpdate=`
for k in pairs(keysp) do
	keysp[k][2]=keysp[k][2]or -1
	keysp[k][2]=math.min(keysp[k][2]+1,1)
end
`

L.execute(exportFunctions);

function luaRestart(){
	L = new Lua.State
	L.execute(exportFunctions);
}

var mouseX = 0;
var mouseY = 0;

let keysPressed = {};
let mouseButtonPressed = [0,0];

function keyDown(e){}

function keyUp(e){}

function keyPressed(key){
	return keysPressed[key];
}

function mouseButton(b){
	if(b == mouseButtonPressed[0]){return true;}else{return false;}
}
function mouseClick(b){
	if(b == mouseButtonPressed[0] 
	&& mouseButtonPressed[1] == 0){return true;}else{return false;}
}

function mouseOnClick(e){}
function mouseOnUnclick(e){}
function mouseOnMove(e){}
function mouseOnWheel(e){}

function init(){}
function update(){}
function draw(){}

graph = imgdataToImage(loadGraph(emptyGraphData()));
font = imgdataToImage(loadGraph(stdfont));
fontS = imgdataToImage(loadGraph(stdfontS))


function mInit(){
	window.addEventListener("mousemove", (e) =>{
		let scaleX = window.innerWidth / mwidth;
		let scaleY = window.innerHeight / mheight;
		let scaleAmount = Math.max(Math.floor(Math.min(scaleX, scaleY)),1);
		const rect = canvas.getBoundingClientRect();
		mouseX = (e.clientX-rect.left)/scaleAmount;
		mouseY = (e.clientY-rect.top)/scaleAmount;
	});
	canvas.addEventListener('mousedown', (e) => {
		audioContext.resume()
		mouseButtonPressed[0] = e.buttons; 
		mouseButtonPressed[1] = -1
		mouseOnClick(e);
		}, false);
	window.addEventListener('mouseup', (e) => {mouseButtonPressed[0] = 0;mouseOnUnclick(e)},false);
	canvas.addEventListener("wheel", (e) =>{mouseOnWheel(e)});
	window.addEventListener('keydown',(e) => {
		keysPressed[e.key] = true;
		keyDown(e);
		let code = e.code
		code = code.replaceAll("Key","")
		code = code.replaceAll("Arrow","")
		code = code.replaceAll("Digit","")
		L.execute(`if keysp["`+code.toLowerCase()+`"]== nil then
		keysp["`+code.toLowerCase()+`"]={true,-1} end`)
	} , false);
	window.addEventListener('keyup', (e) =>{
		delete keysPressed[e.key];
		keyUp(e);
		let code = e.code
		code = code.replaceAll("Key","")
		code = code.replaceAll("Arrow","")
		code = code.replaceAll("Digit","")
		L.execute("keysp['"+code.toLowerCase()+"']=nil")
	}, false);
	
	mode(1);
	
	init();
	
	window.requestAnimationFrame(mUpdate);
}

function mUpdate(timeStamp){
	mouseButtonPressed[1] = Math.min(mouseButtonPressed[1] + 1,1);
	
	secondsPassed = (timeStamp - oldTimeStamp) / 1000;
    oldTimeStamp = timeStamp;
    fps = Math.round(1 / secondsPassed);
	
	L.execute('fps='+fps);
	L.execute(lUpdate);
	
	update();
	mDraw();
	
	window.requestAnimationFrame(mUpdate);
}

function mDraw(){
	let scaleX = window.innerWidth / mwidth;
	let scaleY = window.innerHeight / mheight;
	let scaleAmount = Math.max(Math.floor(Math.min(scaleX, scaleY)),1);
	let translX =(window.innerWidth - (mwidth * scaleAmount)) / 8;
	let translY =(window.innerHeight - (mheight * scaleAmount)) / 2;
	canvas.width = mwidth*scaleAmount
	canvas.height = mheight*scaleAmount
	
	ctx.fillStyle = color(0);
	ctx.fillRect(0, 0, canvas.width, canvas.height);
	
	draw();
	
	ctx.imageSmoothingEnabled = false;
	ctx.drawImage(sprLayer,0,0,sprLayer.width*scaleAmount,sprLayer.height*scaleAmount);
}


